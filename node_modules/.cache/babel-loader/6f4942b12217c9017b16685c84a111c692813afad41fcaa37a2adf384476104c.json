{"ast":null,"code":"var _jsxFileName = \"/home/oladev-01/sorting/src/components/SortingVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AlgorithmControls from './AlgorithmControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortingVisualizer = () => {\n  _s();\n  const [array, setArray] = useState([]);\n  const [sortingTime, setSortingTime] = useState(0);\n  const generateArray = () => {\n    const newArray = [];\n    for (let i = 0; i < 99; i++) {\n      newArray.push(Math.floor(Math.random() * 100) + 1);\n    }\n    setArray(newArray);\n    setSortingTime(0);\n  };\n  const bubbleSort = async () => {\n    const arr = [...array];\n    const startTime = performance.now();\n    for (let i = 0; i < arr.length - 1; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] < arr[j + 1]) {\n          const tmp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = tmp;\n        }\n      }\n      setArray([...arr]);\n      await new Promise(res => setTimeout(res, 100));\n    }\n    const endTime = performance.now();\n    setSortingTime(endTime - startTime);\n  };\n  const mergeSortIterative = async () => {\n    let arr = [...array];\n    const n = arr.length;\n    const startTime = performance.now();\n\n    // Start with subarrays of size 1, double the size in each iteration\n    for (let currSize = 1; currSize < n; currSize = 2 * currSize) {\n      for (let leftStart = 0; leftStart < n - 1; leftStart += 2 * currSize) {\n        const mid = Math.min(leftStart + currSize - 1, n - 1);\n        const rightEnd = Math.min(leftStart + 2 * currSize - 1, n - 1);\n        merge(arr, leftStart, mid, rightEnd);\n        setArray([...arr]); // Update visualization after each merge\n      }\n      await new Promise(res => setTimeout(res, 100)); // Adjust delay for visualization\n    }\n    const endTime = performance.now();\n    setSortingTime(endTime - startTime);\n    setArray(arr);\n  };\n  const merge = (arr, left, mid, right) => {\n    const n1 = mid - left + 1;\n    const n2 = right - mid;\n    const leftArr = [];\n    const rightArr = [];\n\n    // Copy data to temporary arrays leftArr[] and rightArr[]\n    for (let i = 0; i < n1; i++) leftArr[i] = arr[left + i];\n    for (let i = 0; i < n2; i++) rightArr[i] = arr[mid + 1 + i];\n    let i = 0,\n      j = 0,\n      k = left;\n\n    // Merge the temporary arrays back into arr[left..right]\n    while (i < n1 && j < n2) {\n      if (leftArr[i] <= rightArr[j]) {\n        arr[k] = leftArr[i];\n        i++;\n      } else {\n        arr[k] = rightArr[j];\n        j++;\n      }\n      k++;\n      setArray([...arr]); // Visualization update\n    }\n\n    // Copy the remaining elements of leftArr[], if any\n    while (i < n1) {\n      arr[k] = leftArr[i];\n      i++;\n      k++;\n    }\n\n    // Copy the remaining elements of rightArr[], if any\n    while (j < n2) {\n      arr[k] = rightArr[j];\n      j++;\n      k++;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"allsort\",\n    children: [/*#__PURE__*/_jsxDEV(AlgorithmControls, {\n      onGenerate: generateArray,\n      onSort: bubbleSort,\n      onMergeSort: mergeSortIterative\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting\",\n      children: array.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\",\n        style: {\n          height: `${value * 4}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), sortingTime > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-time\",\n      children: [\"Sorting Time: \", sortingTime.toFixed(2), \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(SortingVisualizer, \"LRI8pBPTZrUEpQf/S7DNf2/RsUs=\");\n_c = SortingVisualizer;\nexport default SortingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SortingVisualizer\");","map":{"version":3,"names":["React","useState","AlgorithmControls","jsxDEV","_jsxDEV","SortingVisualizer","_s","array","setArray","sortingTime","setSortingTime","generateArray","newArray","i","push","Math","floor","random","bubbleSort","arr","startTime","performance","now","length","j","tmp","Promise","res","setTimeout","endTime","mergeSortIterative","n","currSize","leftStart","mid","min","rightEnd","merge","left","right","n1","n2","leftArr","rightArr","k","className","children","onGenerate","onSort","onMergeSort","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","style","height","toFixed","_c","$RefreshReg$"],"sources":["/home/oladev-01/sorting/src/components/SortingVisualizer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AlgorithmControls from './AlgorithmControls';\n\nconst SortingVisualizer = () => {\n    const [array, setArray] = useState([]);\n    const [sortingTime, setSortingTime] = useState(0);\n\n    const generateArray = () => {\n        const newArray = [];\n        for (let i = 0; i < 99; i++) {\n            newArray.push(Math.floor(Math.random() * 100) + 1);\n        }\n        setArray(newArray);\n        setSortingTime(0);\n    };\n\n    const bubbleSort = async () => {\n        const arr = [...array];\n        const startTime = performance.now();\n        for (let i = 0; i < arr.length - 1; i++) {\n            for (let j = 0; j < arr.length - i - 1; j++) {\n                if (arr[j] < arr[j + 1]) {\n                    const tmp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = tmp;\n                }\n            }\n            setArray([...arr]);\n            await new Promise((res) => setTimeout(res, 100));\n        }\n        const endTime = performance.now();\n        setSortingTime(endTime - startTime);\n    };\n\n    const mergeSortIterative = async () => {\n        let arr = [...array];\n        const n = arr.length;\n        const startTime = performance.now();\n\n        // Start with subarrays of size 1, double the size in each iteration\n        for (let currSize = 1; currSize < n; currSize = 2 * currSize) {\n            for (let leftStart = 0; leftStart < n - 1; leftStart += 2 * currSize) {\n                const mid = Math.min(leftStart + currSize - 1, n - 1);\n                const rightEnd = Math.min(leftStart + 2 * currSize - 1, n - 1);\n\n                merge(arr, leftStart, mid, rightEnd);\n                setArray([...arr]); // Update visualization after each merge\n            }\n            await new Promise((res) => setTimeout(res, 100)); // Adjust delay for visualization\n        }\n\n        const endTime = performance.now();\n        setSortingTime(endTime - startTime);\n        setArray(arr);\n    };\n\n    const merge = (arr, left, mid, right) => {\n        const n1 = mid - left + 1;\n        const n2 = right - mid;\n\n        const leftArr = [];\n        const rightArr = [];\n\n        // Copy data to temporary arrays leftArr[] and rightArr[]\n        for (let i = 0; i < n1; i++) leftArr[i] = arr[left + i];\n        for (let i = 0; i < n2; i++) rightArr[i] = arr[mid + 1 + i];\n\n        let i = 0,\n            j = 0,\n            k = left;\n\n        // Merge the temporary arrays back into arr[left..right]\n        while (i < n1 && j < n2) {\n            if (leftArr[i] <= rightArr[j]) {\n                arr[k] = leftArr[i];\n                i++;\n            } else {\n                arr[k] = rightArr[j];\n                j++;\n            }\n            k++;\n            setArray([...arr]); // Visualization update\n        }\n\n        // Copy the remaining elements of leftArr[], if any\n        while (i < n1) {\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n        }\n\n        // Copy the remaining elements of rightArr[], if any\n        while (j < n2) {\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n        }\n    };\n\n    return (\n        <div className='allsort'>\n            <AlgorithmControls\n                onGenerate={generateArray}\n                onSort={bubbleSort}\n                onMergeSort={mergeSortIterative}\n            />\n            <div className=\"sorting\">\n                {array.map((value, index) => (\n                    <div\n                        className=\"bar\"\n                        key={index}\n                        style={{\n                            height: `${value * 4}px`,\n                        }}\n                    ></div>\n                ))}\n            </div>\n            {sortingTime > 0 && (\n                <div className=\"sorting-time\">\n                    Sorting Time: {sortingTime.toFixed(2)} ms\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SortingVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}