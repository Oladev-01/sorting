{"ast":null,"code":"import React,{useState}from'react';import AlgorithmControls from'./AlgorithmControls';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SortingVisualizer=()=>{const[array,setArray]=useState([]);const[sortingTime,setSortingTime]=useState(0);const generateArray=()=>{const newArray=[];for(let i=0;i<99;i++){newArray.push(Math.floor(Math.random()*100)+1);}setArray(newArray);setSortingTime(0);};const bubbleSort=async()=>{const arr=[...array];const startTime=performance.now();for(let i=0;i<arr.length-1;i++){for(let j=0;j<arr.length-i-1;j++){if(arr[j]<arr[j+1]){const tmp=arr[j];arr[j]=arr[j+1];arr[j+1]=tmp;}}setArray([...arr]);await new Promise(res=>setTimeout(res,100));}const endTime=performance.now();setSortingTime(endTime-startTime);};const mergeSortIterative=async()=>{let arr=[...array];const n=arr.length;const startTime=performance.now();// Start with subarrays of size 1, double the size in each iteration\nfor(let currSize=1;currSize<n;currSize=2*currSize){for(let leftStart=0;leftStart<n-1;leftStart+=2*currSize){const mid=Math.min(leftStart+currSize-1,n-1);const rightEnd=Math.min(leftStart+2*currSize-1,n-1);merge(arr,leftStart,mid,rightEnd);setArray([...arr]);// Update visualization after each merge\n}await new Promise(res=>setTimeout(res,100));// Adjust delay for visualization\n}const endTime=performance.now();setSortingTime(endTime-startTime);setArray(arr);};const merge=(arr,left,mid,right)=>{const n1=mid-left+1;const n2=right-mid;const leftArr=[];const rightArr=[];// Copy data to temporary arrays leftArr[] and rightArr[]\nfor(let i=0;i<n1;i++)leftArr[i]=arr[left+i];for(let i=0;i<n2;i++)rightArr[i]=arr[mid+1+i];let i=0,j=0,k=left;// Merge the temporary arrays back into arr[left..right]\nwhile(i<n1&&j<n2){if(leftArr[i]<=rightArr[j]){arr[k]=leftArr[i];i++;}else{arr[k]=rightArr[j];j++;}k++;setArray([...arr]);// Visualization update\n}// Copy the remaining elements of leftArr[], if any\nwhile(i<n1){arr[k]=leftArr[i];i++;k++;}// Copy the remaining elements of rightArr[], if any\nwhile(j<n2){arr[k]=rightArr[j];j++;k++;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"allsort\",children:[/*#__PURE__*/_jsx(AlgorithmControls,{onGenerate:generateArray,onSort:bubbleSort,onMergeSort:mergeSortIterative}),/*#__PURE__*/_jsx(\"div\",{className:\"sorting\",children:array.map((value,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"bar\",style:{height:`${value*4}px`}},index))}),sortingTime>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"sorting-time\",children:[\"Sorting Time: \",sortingTime.toFixed(2),\" ms\"]})]});};export default SortingVisualizer;","map":{"version":3,"names":["React","useState","AlgorithmControls","jsx","_jsx","jsxs","_jsxs","SortingVisualizer","array","setArray","sortingTime","setSortingTime","generateArray","newArray","i","push","Math","floor","random","bubbleSort","arr","startTime","performance","now","length","j","tmp","Promise","res","setTimeout","endTime","mergeSortIterative","n","currSize","leftStart","mid","min","rightEnd","merge","left","right","n1","n2","leftArr","rightArr","k","className","children","onGenerate","onSort","onMergeSort","map","value","index","style","height","toFixed"],"sources":["/home/oladev-01/mypld/pld/react/sorting/src/components/SortingVisualizer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AlgorithmControls from './AlgorithmControls';\n\nconst SortingVisualizer = () => {\n    const [array, setArray] = useState([]);\n    const [sortingTime, setSortingTime] = useState(0);\n\n    const generateArray = () => {\n        const newArray = [];\n        for (let i = 0; i < 99; i++) {\n            newArray.push(Math.floor(Math.random() * 100) + 1);\n        }\n        setArray(newArray);\n        setSortingTime(0);\n    };\n\n    const bubbleSort = async () => {\n        const arr = [...array];\n        const startTime = performance.now();\n        for (let i = 0; i < arr.length - 1; i++) {\n            for (let j = 0; j < arr.length - i - 1; j++) {\n                if (arr[j] < arr[j + 1]) {\n                    const tmp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = tmp;\n                }\n            }\n            setArray([...arr]);\n            await new Promise((res) => setTimeout(res, 100));\n        }\n        const endTime = performance.now();\n        setSortingTime(endTime - startTime);\n    };\n\n    const mergeSortIterative = async () => {\n        let arr = [...array];\n        const n = arr.length;\n        const startTime = performance.now();\n\n        // Start with subarrays of size 1, double the size in each iteration\n        for (let currSize = 1; currSize < n; currSize = 2 * currSize) {\n            for (let leftStart = 0; leftStart < n - 1; leftStart += 2 * currSize) {\n                const mid = Math.min(leftStart + currSize - 1, n - 1);\n                const rightEnd = Math.min(leftStart + 2 * currSize - 1, n - 1);\n\n                merge(arr, leftStart, mid, rightEnd);\n                setArray([...arr]); // Update visualization after each merge\n            }\n            await new Promise((res) => setTimeout(res, 100)); // Adjust delay for visualization\n        }\n\n        const endTime = performance.now();\n        setSortingTime(endTime - startTime);\n        setArray(arr);\n    };\n\n    const merge = (arr, left, mid, right) => {\n        const n1 = mid - left + 1;\n        const n2 = right - mid;\n\n        const leftArr = [];\n        const rightArr = [];\n\n        // Copy data to temporary arrays leftArr[] and rightArr[]\n        for (let i = 0; i < n1; i++) leftArr[i] = arr[left + i];\n        for (let i = 0; i < n2; i++) rightArr[i] = arr[mid + 1 + i];\n\n        let i = 0,\n            j = 0,\n            k = left;\n\n        // Merge the temporary arrays back into arr[left..right]\n        while (i < n1 && j < n2) {\n            if (leftArr[i] <= rightArr[j]) {\n                arr[k] = leftArr[i];\n                i++;\n            } else {\n                arr[k] = rightArr[j];\n                j++;\n            }\n            k++;\n            setArray([...arr]); // Visualization update\n        }\n\n        // Copy the remaining elements of leftArr[], if any\n        while (i < n1) {\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n        }\n\n        // Copy the remaining elements of rightArr[], if any\n        while (j < n2) {\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n        }\n    };\n\n    return (\n        <div className='allsort'>\n            <AlgorithmControls\n                onGenerate={generateArray}\n                onSort={bubbleSort}\n                onMergeSort={mergeSortIterative}\n            />\n            <div className=\"sorting\">\n                {array.map((value, index) => (\n                    <div\n                        className=\"bar\"\n                        key={index}\n                        style={{\n                            height: `${value * 4}px`,\n                        }}\n                    ></div>\n                ))}\n            </div>\n            {sortingTime > 0 && (\n                <div className=\"sorting-time\">\n                    Sorting Time: {sortingTime.toFixed(2)} ms\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SortingVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}